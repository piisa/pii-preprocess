[
  [
    "1",
    "PII management specification\n",
    {
      "after": "  Some rough initial ideas\n"
    }
  ],
  [
    "2",
    "  Some rough initial ideas\n",
    {
      "before": "PII management specification\n",
      "after": "Overall architecture\n"
    }
  ],
  [
    "3",
    "Overall architecture\n",
    {
      "before": "  Some rough initial ideas\n",
      "after": "  The general structure of a framework dealing with PII management could be visualized as the following diagram:\n"
    }
  ],
  [
    "4",
    "  The general structure of a framework dealing with PII management could be visualized as the following diagram:\n",
    {
      "before": "Overall architecture\n",
      "after": "  There are up to four processing blocks for such a framework:\n"
    }
  ],
  [
    "5",
    "  There are up to four processing blocks for such a framework:\n",
    {
      "before": "  The general structure of a framework dealing with PII management could be visualized as the following diagram:\n",
      "after": "  1. Preprocessing: block whose mission is to read a document in an arbitrary format (a Word Document, a Web page, a PDF file, etc) and produce a normalized version, retaining only a simplified version of the high-level structure and all the text data.\n"
    }
  ],
  [
    "6",
    "  1. Preprocessing: block whose mission is to read a document in an arbitrary format (a Word Document, a Web page, a PDF file, etc) and produce a normalized version, retaining only a simplified version of the high-level structure and all the text data.\n",
    {
      "before": "  There are up to four processing blocks for such a framework:\n",
      "after": "  2. Detection: block in charge of processing input data (usually in text format) and performing detection of candidates to be assigned as PII data. This block uses as input:\n"
    }
  ],
  [
    "7",
    "  2. Detection: block in charge of processing input data (usually in text format) and performing detection of candidates to be assigned as PII data. This block uses as input:\n",
    {
      "before": "  1. Preprocessing: block whose mission is to read a document in an arbitrary format (a Word Document, a Web page, a PDF file, etc) and produce a normalized version, retaining only a simplified version of the high-level structure and all the text data.\n",
      "after": "    ◦ source document. we will consider a normalized data format that conveys the raw text contents, together with some structural information (which can provide useful hints to the PII Detection modules about the relations between text chunks)\n"
    }
  ],
  [
    "8",
    "    ◦ source document. we will consider a normalized data format that conveys the raw text contents, together with some structural information (which can provide useful hints to the PII Detection modules about the relations between text chunks)\n",
    {
      "before": "  2. Detection: block in charge of processing input data (usually in text format) and performing detection of candidates to be assigned as PII data. This block uses as input:\n",
      "after": "    ◦ configuration information: specification of contextual elements affecting detection (e.g. text language, applicable countries, etc)\n"
    }
  ],
  [
    "9",
    "    ◦ configuration information: specification of contextual elements affecting detection (e.g. text language, applicable countries, etc)\n",
    {
      "before": "    ◦ source document. we will consider a normalized data format that conveys the raw text contents, together with some structural information (which can provide useful hints to the PII Detection modules about the relations between text chunks)\n",
      "after": "    ◦ component information: the set of available PII Detectors that can be used (assuming we take a modular approach, there might be a database of “pluggable modules” we can use for PII detection). Each Detector will define the type and parameters of PII that can detect.\n"
    }
  ],
  [
    "10",
    "    ◦ component information: the set of available PII Detectors that can be used (assuming we take a modular approach, there might be a database of “pluggable modules” we can use for PII detection). Each Detector will define the type and parameters of PII that can detect.\n",
    {
      "before": "    ◦ configuration information: specification of contextual elements affecting detection (e.g. text language, applicable countries, etc)\n",
      "after": "  3. Decision: block that takes a number of PII candidates, as produced by the Detection block, and consolidates that information, producing as final result the set of PII elements in the text that need to be addressed. In the process it might combine PII candidates, choose among overlapping PII candidates, reject others, etc. This block uses as input:\n"
    }
  ],
  [
    "11",
    "  3. Decision: block that takes a number of PII candidates, as produced by the Detection block, and consolidates that information, producing as final result the set of PII elements in the text that need to be addressed. In the process it might combine PII candidates, choose among overlapping PII candidates, reject others, etc. This block uses as input:\n",
    {
      "before": "    ◦ component information: the set of available PII Detectors that can be used (assuming we take a modular approach, there might be a database of “pluggable modules” we can use for PII detection). Each Detector will define the type and parameters of PII that can detect.\n",
      "after": "    ◦ Candidate list: A list of detected PII candidates\n"
    }
  ],
  [
    "12",
    "    ◦ Candidate list: A list of detected PII candidates\n",
    {
      "before": "  3. Decision: block that takes a number of PII candidates, as produced by the Detection block, and consolidates that information, producing as final result the set of PII elements in the text that need to be addressed. In the process it might combine PII candidates, choose among overlapping PII candidates, reject others, etc. This block uses as input:\n",
      "after": "    ◦ Configuration information, as provided by the Decision block (language, countries, etc)\n"
    }
  ],
  [
    "13",
    "    ◦ Configuration information, as provided by the Decision block (language, countries, etc)\n",
    {
      "before": "    ◦ Candidate list: A list of detected PII candidates\n",
      "after": "    ◦ An optional purpose/application scenario, to guide the decisions\n"
    }
  ],
  [
    "14",
    "    ◦ An optional purpose/application scenario, to guide the decisions\n",
    {
      "before": "    ◦ Configuration information, as provided by the Decision block (language, countries, etc)\n",
      "after": "    ◦ Context information, as defined in its own configuration. This might include: requirements on PII specificity, sensitivity and scarcity, applicable regulations, etc\n"
    }
  ],
  [
    "15",
    "    ◦ Context information, as defined in its own configuration. This might include: requirements on PII specificity, sensitivity and scarcity, applicable regulations, etc\n",
    {
      "before": "    ◦ An optional purpose/application scenario, to guide the decisions\n",
      "after": "  4. Transformation. This is the block that takes the decided PII entities, and acts upon them, depending on the intended purpose.\n"
    }
  ],
  [
    "16",
    "  4. Transformation. This is the block that takes the decided PII entities, and acts upon them, depending on the intended purpose.\n",
    {
      "before": "    ◦ Context information, as defined in its own configuration. This might include: requirements on PII specificity, sensitivity and scarcity, applicable regulations, etc\n",
      "after": "  There can be different Transformation blocks, all of them sharing the same interface but providing different outcomes. Some examples are:\n"
    }
  ],
  [
    "17",
    "  There can be different Transformation blocks, all of them sharing the same interface but providing different outcomes. Some examples are:\n",
    {
      "before": "  4. Transformation. This is the block that takes the decided PII entities, and acts upon them, depending on the intended purpose.\n",
      "after": "    • Anonymization: modify the text to eliminate decided PII entities. Depending on options they can be replaced by placeholders, dummy values, generated fake PII data, etc\n"
    }
  ],
  [
    "18",
    "    • Anonymization: modify the text to eliminate decided PII entities. Depending on options they can be replaced by placeholders, dummy values, generated fake PII data, etc\n",
    {
      "before": "  There can be different Transformation blocks, all of them sharing the same interface but providing different outcomes. Some examples are:\n",
      "after": "    • Analytics:  provide the capability to extract and visualize aggregated statistics on decided PII and their associated parameters\n"
    }
  ],
  [
    "19",
    "    • Analytics:  provide the capability to extract and visualize aggregated statistics on decided PII and their associated parameters\n",
    {
      "before": "    • Anonymization: modify the text to eliminate decided PII entities. Depending on options they can be replaced by placeholders, dummy values, generated fake PII data, etc\n"
    }
  ]
]
